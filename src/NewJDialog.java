
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Amin
 */
public class NewJDialog extends javax.swing.JDialog {

    /**
     * Creates new form NewJDialog
     *
     * @param parent
     * @param modal
     */
    Thread thread;
    java.awt.Frame parent;
    int xMouse, yMouse;
    Boolean theme = true, pin = true;
    String[] currencyName = {"dollar", "euro", "bitcoin", "ethereum", "ripple"};
    int selectedCurrencyIndex = 0;
    Boolean justStarted = true;  //fetching data for a currency has just started
    Boolean loopBreaked = false; //true if fetchData method infinit loop breaked

    public NewJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.parent = parent;

        setBackground(new Color(240, 240, 240, 0));
        int p = (int) (Toolkit.getDefaultToolkit().getScreenSize().getWidth() - 1.5 * parent.getWidth());
        setLocation(p, 0);
        price.setOpaque(true);
        change.setOpaque(true);
        offline_mode.setVisible(false);
        connect_to_net.setVisible(false);

        fetchData();

        setTheme(theme);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSlider1 = new javax.swing.JSlider();
        offline_mode = new javax.swing.JLabel();
        connect_to_net = new javax.swing.JLabel();
        headerImage = new javax.swing.JLabel();
        price = new javax.swing.JLabel();
        change = new javax.swing.JLabel();
        graph = new javax.swing.JLabel();

        jMenuItem5.setText("Update");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem5);

        jMenuItem4.setText("Next");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem4);

        jMenuItem6.setText("Previous");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem6);
        jPopupMenu1.add(jSeparator1);

        jMenuItem3.setText("Unpin");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem3);

        jMenuItem2.setText("Dark Theme");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        jMenuItem1.setText("Close");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(200, 201));
        setUndecorated(true);
        setResizable(false);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        getContentPane().setLayout(null);

        offline_mode.setFont(new java.awt.Font("Kartika", 1, 10)); // NOI18N
        offline_mode.setForeground(new java.awt.Color(162, 162, 162));
        offline_mode.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        offline_mode.setText("OFFLINE MODE");
        offline_mode.setToolTipText("");
        offline_mode.setMaximumSize(new java.awt.Dimension(200, 20));
        offline_mode.setMinimumSize(new java.awt.Dimension(200, 20));
        offline_mode.setPreferredSize(new java.awt.Dimension(200, 20));
        offline_mode.setRequestFocusEnabled(false);
        getContentPane().add(offline_mode);
        offline_mode.setBounds(0, 130, 100, 20);

        connect_to_net.setFont(new java.awt.Font("Kartika", 1, 8)); // NOI18N
        connect_to_net.setForeground(new java.awt.Color(162, 162, 162));
        connect_to_net.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        connect_to_net.setText("CONNECT TO INTERNET");
        connect_to_net.setMaximumSize(new java.awt.Dimension(103, 20));
        connect_to_net.setMinimumSize(new java.awt.Dimension(103, 20));
        connect_to_net.setPreferredSize(new java.awt.Dimension(103, 20));
        getContentPane().add(connect_to_net);
        connect_to_net.setBounds(0, 140, 103, 20);

        headerImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bitcoin-l.png"))); // NOI18N
        headerImage.setVerifyInputWhenFocusTarget(false);
        headerImage.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                headerImageMouseDragged(evt);
            }
        });
        headerImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                headerImageMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                headerImageMouseReleased(evt);
            }
        });
        getContentPane().add(headerImage);
        headerImage.setBounds(0, 0, 200, 200);

        price.setFont(new java.awt.Font("Iranian Sans", 0, 14)); // NOI18N
        price.setForeground(new java.awt.Color(77, 77, 77));
        price.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        price.setText("-");
        price.setMaximumSize(new java.awt.Dimension(200, 30));
        price.setMinimumSize(new java.awt.Dimension(200, 30));
        price.setOpaque(true);
        price.setPreferredSize(new java.awt.Dimension(200, 30));
        getContentPane().add(price);
        price.setBounds(0, 70, 200, 30);

        change.setBackground(new java.awt.Color(255, 245, 245));
        change.setFont(new java.awt.Font("Iranian Sans", 1, 14)); // NOI18N
        change.setForeground(new java.awt.Color(77, 77, 77));
        change.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        change.setText("-");
        change.setToolTipText("in 24 Hour");
        change.setMaximumSize(new java.awt.Dimension(200, 30));
        change.setMinimumSize(new java.awt.Dimension(200, 30));
        change.setPreferredSize(new java.awt.Dimension(200, 30));
        getContentPane().add(change);
        change.setBounds(0, 100, 200, 30);

        graph.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        graph.setMaximumSize(new java.awt.Dimension(164, 48));
        graph.setMinimumSize(new java.awt.Dimension(164, 48));
        graph.setPreferredSize(new java.awt.Dimension(164, 48));
        getContentPane().add(graph);
        graph.setBounds(18, 150, 164, 48);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed

    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged

    }//GEN-LAST:event_formMouseDragged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void headerImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_headerImageMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_headerImageMousePressed

    private void headerImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_headerImageMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        int newX = x - xMouse;
        int newY = y - yMouse;
        setLocation(newX, newY);
    }//GEN-LAST:event_headerImageMouseDragged

    private void headerImageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_headerImageMouseReleased
        if (evt.isPopupTrigger()) {
            jPopupMenu1.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_headerImageMouseReleased

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        theme = !theme;
        setTheme(theme);
        if (theme) {
            jMenuItem2.setText("Dark Theme");
        } else {
            jMenuItem2.setText("Light Theme");
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if (pin) {
            jMenuItem3.setText("Pin");
            parent.setAlwaysOnTop(false);
            pin = false;
        } else {
            jMenuItem3.setText("Unpin");
            parent.setAlwaysOnTop(true);
            pin = true;
        }

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        offline_mode.setVisible(false);
        connect_to_net.setVisible(false);
        selectedCurrencyIndex++;
        if (selectedCurrencyIndex >= currencyName.length) {
            selectedCurrencyIndex = 0;
        }
        justStarted = true;
        price.setText("");
        change.setText("");
        graph.setIcon(null);
        setTheme(theme);

        if (!loopBreaked) {
            thread.interrupt();
        } else {
            fetchData();
            loopBreaked = false;
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        offline_mode.setVisible(false);
        connect_to_net.setVisible(false);
        if (!loopBreaked) {
            thread.interrupt();
        } else {
            fetchData();
            loopBreaked = false;
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        offline_mode.setVisible(false);
        connect_to_net.setVisible(false);
        selectedCurrencyIndex--;
        if (selectedCurrencyIndex >= currencyName.length) {
            selectedCurrencyIndex = 0;
        }
        justStarted = true;
        price.setText("");
        change.setText("");
        graph.setIcon(null);
        setTheme(theme);

        if (!loopBreaked) {
            thread.interrupt();
        } else {
            fetchData();
            loopBreaked = false;
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NewJDialog dialog = new NewJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    public void fetchData() {
        thread = new Thread() {
            @Override
            public void run() {
                Currency currency = null;
                BufferedImage img = null;
                int timeToSleep = 300000; // 300 seconds or 5 minutes
                int c = 0; //loop counter

                while (true) {
                    if (!networkAccess()) {
                        System.out.println("There is no network access!");
                        //make offlin mode visible
                        offline_mode.setVisible(true);
                        connect_to_net.setVisible(true);
                        fetchDataOffline();
                        loopBreaked = true;
                        break;
                    } else {
                        //make offlin mode invisible
                        offline_mode.setVisible(false);
                        connect_to_net.setVisible(false);
                    }
                    c++;
                    try {
                        currency = new Data().getCryptoCurrency(currencyName[selectedCurrencyIndex]);
                        writeObjectToFile(currency);
                    } catch (IOException ex) {
                        Logger.getLogger(NewJDialog.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    change.setText(currency.getChange());
                    graph.setIcon(null);
                    if (currency.getName().equals("dollar") || currency.getName().equals("euro")) {
                        price.setText(currency.getPrice() + " ریال");
                    } else {
                        price.setText(currency.getPrice());
                        if (c > 10 || justStarted) { //the graph image is fetched once in every 10 round
                            if (justStarted) {
                                justStarted = false;
                            }
                            c = 0;
                            try {
                                URL url = new URL(currency.getGraph());
                                img = ImageIO.read(url);
                                ImageIO.write(img, "png", new File(currency.getName() + ".png"));
                                System.out.println(currency.getName() + ".png has been saved.");
                                graph.setIcon(new ImageIcon(img));
                            } catch (IOException e) {
                                System.out.println(e.toString());
                            }
                        }
                    }
                    try {
                        Thread.sleep(timeToSleep);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(NewJDialog.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };
        thread.start();
    }

    private void fetchDataOffline() {
        Currency currency = readObjectFromFile(currencyName[selectedCurrencyIndex]);
        if (currency.getName().equals("dollar") || currency.getName().equals("euro")) {
            price.setText(currency.getPrice() + " ریال");
        } else {
            price.setText(currency.getPrice());
        }
        change.setText(currency.getChange());

        //set graph image
        if (!currencyName[selectedCurrencyIndex].equals("dollar")
                && !currencyName[selectedCurrencyIndex].equals("euro")) {
            //there is no graph image for dollar and euro,
            //so we check that the selected currency is not dollar or euro
            BufferedImage img = null;
            try {
                img = ImageIO.read(new File(currencyName[selectedCurrencyIndex] + ".png"));
                graph.setIcon(new ImageIcon(img));
            } catch (IOException ex) {
                Logger.getLogger(NewJDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void writeObjectToFile(Currency currency) {
        try {
            FileOutputStream fileOut = new FileOutputStream(new File(currency.getName() + "_data"));
            ObjectOutputStream objectOut = new ObjectOutputStream(fileOut);
            objectOut.writeObject(currency);
            fileOut.close();
            objectOut.close();
            System.out.println("The Object \"" + currency.getName() + "\"  was succesfully written to a file");
        } catch (IOException ex) {
            System.err.println(ex.toString());
        }
    }

    public Currency readObjectFromFile(String name) {
        Currency currency = null;
        try {
            FileInputStream fileIn = new FileInputStream(new File(name + "_data"));
            ObjectInputStream objectIn = new ObjectInputStream(fileIn);
            currency = (Currency) objectIn.readObject();
            System.out.println("The Object \"" + currency.getName() + "\" was succesfully read from file");
            fileIn.close();
            objectIn.close();
        } catch (IOException ex) {
            System.err.println(ex.toString());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewJDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        return currency;
    }

    private void setTheme(Boolean theme) {

        Color bgPrice, bgChange, txt;

        if (theme) {
            bgPrice = new Color(240, 240, 240);
            bgChange = new Color(250, 250, 250);
            txt = new Color(77, 77, 77);
        } else {
            bgPrice = new Color(85, 85, 85, 200);
            bgChange = new Color(75, 75, 75, 200);
            txt = new Color(255, 255, 255);
        }
        price.setBackground(bgPrice);
        price.setForeground(txt);
        change.setBackground(bgChange);
        change.setForeground(txt);

        String fileName = currencyName[selectedCurrencyIndex] + "-" + (theme ? "l" : "d") + ".png";
        ImageIcon image = new ImageIcon(getClass().getResource(fileName));
        headerImage.setIcon(image);
    }

    /*
    Checking Network Access 
        by requesting to aparat.com
     */
    public Boolean networkAccess() {
        try {
            int timeout = 2000;
            InetAddress[] addresses = InetAddress.getAllByName("www.aparat.com");
            for (InetAddress address : addresses) {
                if (address.isReachable(timeout)) {
                    System.out.printf("%s is reachable%n", address);
                    return true;
                } else {
                    System.out.printf("%s could not be contacted%n", address);
                }
            }
        } catch (UnknownHostException ex) {
            Logger.getLogger(NewJDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewJDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel change;
    private javax.swing.JLabel connect_to_net;
    private javax.swing.JLabel graph;
    private javax.swing.JLabel headerImage;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JLabel offline_mode;
    private javax.swing.JLabel price;
    // End of variables declaration//GEN-END:variables

}
